<BehaviorTree>
    <Variables>
        <Variable name="HasTarget"/>
        <!-- these variables are not used in this BT, but need to be present to prevent a warning caused by BasicAI:OnReset() -->
        <Variable name="ExecuteSequence" />
        <Variable name="ExecuteInterruptibleSequence" />
    </Variables>
    <SignalVariables>
        <Signal name="OnNewAttentionTarget" variable="HasTarget" value="true"/>
        <Signal name="OnNoTarget" variable="HasTarget" value="false"/>
        <Signal name="OnLostSightOfTarget" variable="HasTarget" value="false" />
    </SignalVariables>
    <Timestamps></Timestamps>
    <Root>
        <StateMachine>
            <!--
			=================================================
					Idle
			=================================================
			-->
            <State name="Idle">
                <Transitions>
                    <Transition to="Combat" onEvent="OnNewAttentionTarget"/>
					<Transition to="IdleTwo" onEvent="GoTo_IdleTwo"/>
                </Transitions>
                <BehaviorTree>
					
                    <Sequence>
                        <!-- <SetAlertness value="0"/> -->
						<!-- <ExecuteLua code="entity.actor:HolsterItem(true)" /> -->
                        <ExecuteLua code="entity:FollowCounterTerrorist()"/> 
						<Move to="RefPoint" speed="Sprint" stance="Stand" stopWithinDistance="2"/> 
                        <!-- <Stance name="Relaxed"/> -->
                        <!-- <Animate name="ZZ_AI_idleBreak"/> -->
						<SendTransitionSignal name="GoTo_IdleTwo" />
						<!-- <Halt/> -->
                    </Sequence>
					
                </BehaviorTree>
            </State>
            
			<!--
			=================================================
					IdleTwo
			=================================================
			-->
            <State name="IdleTwo">
                <Transitions>
                    <Transition to="Combat" onEvent="OnNewAttentionTarget"/>
					<Transition to="Idle" onEvent="GoTo_Idle"/>
                </Transitions>
                <BehaviorTree>
					
                    <Sequence>
                        <!-- <SetAlertness value="0"/> -->
						<!-- <ExecuteLua code="entity.actor:HolsterItem(true)" /> -->
                        <ExecuteLua code="entity:FollowCounterTerrorist()"/>
						<Move to="RefPoint" speed="Run" stance="Stand" stopWithinDistance="2"/>
                        <!-- <Stance name="Relaxed"/> -->
                        <!-- <Animate name="ZZ_AI_idleBreak"/> -->
						<SendTransitionSignal name="GoTo_Idle" />
						<!-- <Halt/> -->
                    </Sequence>
					
                </BehaviorTree>
            </State>
			
			<!--
			=================================================
					Combat
			=================================================
			-->
            <State name="Combat">
                <Transitions>
                    <Transition to="Idle" onEvent="GoTo_Idle"/>
                </Transitions>
                <BehaviorTree>
                    <Sequence>
                        <Log message="Now I should fight you!"/>
                        <SetAlertness value="2"/>
                        <Stance name="Alerted"/>
                        <ExecuteLua code="entity:SelectPrimaryWeapon()"/>
                        <Communicate name="TargetSpottedWhileSearching" channel="Reaction" expirity="1.0" waitUntilFinished="0" />
                        <!-- main combat loop -->
                        <Loop _startLog="main combat loop">
                            <Sequence>
                                <SuppressFailure>
                                    <Move to="Target" speed="Run" stance="Stand" avoidDangers="0" stopWithinDistance="10"/>
                                </SuppressFailure>
                                <Shoot at="Target" fireMode="Burst" stance="Stand" duration="2.0" _startLog="starting to shoot"/>
                                <!-- keep fighting or transition back to "Idle" -->
                                <Selector>
                                    <AssertCondition condition="HasTarget"/>
                                    <SendTransitionSignal name="GoTo_Idle"/>
                                </Selector>
                            </Sequence>
                        </Loop>
                    </Sequence>
                </BehaviorTree>
            </State>
        </StateMachine>
	</Root>
</BehaviorTree>
